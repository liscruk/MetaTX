#!/usr/bin/env python

import os
import sys
import re

RESULTS = config["results"]
SAMPLES = config["samples"]
SPECIES = config["species"]

# Get reference of human (if human is involved)
refHuman = config["hg38Seq"]
anHuman = config["hg38Gtf"]
txHuman = config["hg38Tx"]

# Get reference of Xeno or Meta organism
refXeno = config["XenoSeq"]
anXeno = config["XenoGtf"]
txXeno = config["XenoTx"]


# Prep output with rule all
rule all:
	input:
		expand(RESULTS+"bam/genomic/{sample}.{species}.stat.tsv", sample=SAMPLES, species = SPECIES),
		expand(RESULTS+"bam/tx/{sample}.{species}.stat.tsv", sample=SAMPLES, species = SPECIES),
		RESULTS+"counts/quant.tsv"


		# expand(RESULTS + "counts/{sample}.{species}.featureCounts.txt", sample = SAMPLES, species = SPECIES),
		# expand(RESULTS+"flair/{sample}.{species}", sample = SAMPLES, species = SPECIES)


rule MapGeneric:
	input:
		reads = lambda wildcards: config["samples"][wildcards.sample]
	output:
		bam = RESULTS+"bam/genomic/{sample}.{species}.bam"
	threads:
		config["threads"]
	params:
		ref = lambda wildcards: refHuman if wildcards.species == SPECIES[0] else refXeno

	shell:"""
        minimap2 -t {threads} -ax splice -Y {params.ref} {input.reads} | \
        samtools view -bS - | \
        samtools sort -@ {threads} -o {output.bam};
	"""

rule MapGenericTx:
	input:
		reads = lambda wildcards: config["samples"][wildcards.sample]
	output:
		bam = RESULTS+"bam/tx/{sample}.{species}.bam"
	threads:
		config["threads"]
	params:
		ref = lambda wildcards: txHuman if wildcards.species == SPECIES[0] else txXeno

	shell:"""
        minimap2 -t {threads} -ax map-ont -uf -Y {params.ref} {input.reads} | \
        samtools view -bS - | \
        samtools sort -@ {threads} -o {output.bam};
	"""



# Flagstat Rule (with separate outputs for hg and xn)
rule flagstat:
    input:
        bam = [RESULTS + "bam/{sample}.{species}.bam", RESULTS + "bam/{sample}.{species}.bam"]
    output:
        stat = [RESULTS + "bam/{sample}.{species}.stat.tsv", RESULTS + "bam/{sample}.{species}.stat.tsv"]
    shell:"""
        samtools flagstat {input.bam[0]} -@ {threads} > {output.stat[0]};
        samtools flagstat {input.bam[1]} -@ {threads} > {output.stat[1]};

	"""

rule salmonQuant:
	input:
		bam = RESULTS+"bam/tx/{sample}.{species}.bam",
		trp = lambda wildcards: txHuman if wildcards.species == SPECIES[0] else txXeno


	output:
		trp_quant = RESULTS+"counts/{sample}_{species}/quant.sf"

	threads:
		config["threads"]
	params:
		outDir = RESULTS+"counts/{sample}_{species}/"
	conda:
		"salmon"
	shell:
		"salmon quant --noErrorModel -p {threads} -l U -t {input.trp} -a {input.bam} -o {params.outDir}"


exp = config["expiriment"]

rule salmonMerge:
	input:
		dirs = expand(RESULTS+"counts/{sample}_{species}/", sample=SAMPLES, species = SPECIES)
	output:
		mFs = RESULTS+"counts/quant.tsv"
	conda:
		"salmon"
	shell:"""
		salmon quantmerge --quants {input.dirs} --output {output}
	"""


rule featureCounts:
    input:
    	# Dynamically determine the BAM file
        bam = lambda wildcards: RESULTS + "bam/{sample}.{species}.bam",
        # Select annotation based on species
        annotation = lambda wildcards: anHuman if wildcards.species == SPECIES[0] else anXeno  

    output:
        counts = RESULTS + "counts/{sample}.{species}.featureCounts.txt"

    threads:
        config["threads"]
    shell:"""
        featureCounts  -L -a {input.annotation} -g 'gene_name' -p -t exon -T {threads} {input.bam} -o {output.counts}
    """



# Currently not working - bettert to stick with featureCount for now
rule MapFlair:
	input:
		reads = lambda wildcards: config["samples"][wildcards.sample]
	output:
		out = RESULTS+"flair/{sample}.{species}/"
	params:
		an = lambda wildcards: anHuman if wildcards.species == SPECIES[0] else anXeno,
		ref = lambda wildcards: refHuman if wildcards.species == SPECIES[0] else refXeno
	conda:
		"flair"
	threads:
		config["threads"]
	shell:"""

		flair align --threads {threads} -g {params.ref} -r {input.reads} --output {output.out}
	"""


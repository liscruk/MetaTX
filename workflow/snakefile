#!/usr/bin/env python

import os
import sys
import re

RESULTS = config["results"]
SAMPLES = config["samples"]
SPECIES = config["species"]
REFNAME = SPECIES[0]+"."+SPECIES[1]

# Get reference of human (if human is involved)
refHuman = config["hg38Seq"]
anHuman = config["hg38Gtf"]
txHuman = config["hg38Tx"]

# Get reference of Xeno or Meta organism
# Fasta Sequence
refXeno = config["XenoSeq"]
anXeno = config["XenoGtf"]
txXeno = config["XenoTx"] 

# Benchmarking code yet to be integrated
# for i in $(ls *.bam);do echo $i; samtools view -F 4 $i | awk '{print $1}' > ${i%.bam}.mapped.reads.txt; sort -u ${i%.bam}.mapped.reads.txt -o ${i%.bam}.mapped.reads.txt;done

# Prep output with rule all
rule all:
	input:
		# expand(RESULTS+"counts/{sample}/quant.sf",sample=SAMPLES)
		RESULTS+"counts/tx/quant.tsv",

rule makeRef:
	input:
		# Host reference fasta
		hr = refHuman,

		# Host reference annotation gtf
		ha = anHuman,

		# Host reference transcriptome fasta
		hx = txHuman,

		# Xeno or pathogen model fasta
		xr = refXeno,

		# Xeno or pathogen gtf NOT gff3
		xa = anXeno,

		# Xeno or pathogen transcripts fasta
		xx = txXeno

	output:
		rHyb = RESULTS + "refs/Hybrid_genome." + REFNAME + ".fa",
		anHyb = RESULTS + "refs/Hybrid_annotation." + REFNAME + ".gtf",
		txHyb = RESULTS + "refs/Hybrd_transcriptome." + REFNAME + ".fa"

	shell:"""
		cat {input.hr} {input.xr} > {output.rHyb};
		cat {input.hx} {input.xx} > {output.txHyb}
		grep -v '^#' {input.hx} > {output.anHyb};
		grep -v '^#' {input.xa} >> {output.anHyb}

	"""

rule Map:
	input:
		reads = lambda wildcards: config["samples"][wildcards.sample],
		ref = RESULTS + "refs/Hybrd_transcriptome." + REFNAME + ".fa"
	output:
		bam = RESULTS+"bam/tx/{sample}.bam"
	threads:
		config["threads"]
	params:
		ref = RESULTS + "refs/Hybrd_transcriptome." + REFNAME + ".fa"

	shell:"""
		minimap2 -t {threads} -ax map-ont -uf -Y {params.ref} {input.reads} | \
		samtools view -bS - | \
		samtools sort -@ {threads} -o {output.bam};
	"""

# Flagstat Rule (with separate outputs for hg and xn)
rule flagstat:
	input:
		bam = RESULTS+"bam/tx/{sample}.bam"
	output:
		stat = RESULTS+"bam/tx/{sample}.txt" 
	shell:"""
		samtools flagstat {input.bam} -@ {threads} > {output.stat};
	"""
### Generation quantifcation by salmon for seperate mapping
rule salmonQuant:
	input:
		bam = RESULTS+"bam/tx/{sample}.bam",
		trp = RESULTS + "refs/Hybrd_transcriptome." + REFNAME + ".fa"
	output:
		trp_quant = RESULTS+"counts/{sample}/quant.sf",
		trp_dir = directory(RESULTS+"counts/{sample}/")
	threads:
		config["threads"]
	conda:
		"salmon"
	shell:
		"salmon quant --noErrorModel -p {threads} -l U -t {input.trp} -a {input.bam} -o {output.trp_dir}"

rule salmonMerge:
	input:
		dirs = expand(RESULTS+"counts/{sample}/", sample=SAMPLES, species = SPECIES)
	output:
		tx = RESULTS+"counts/tx/quant.tsv",
	conda:
		"salmon"
	shell:"""
		salmon quantmerge --quants {input.dirs} --output {output.tx};
	"""

rule featureCounts:
	input:
		# Dynamically determine the BAM file
		bam = lambda wildcards: RESULTS + "bam/{sample}.{species}.bam",
		# Select annotation based on species
		annotation = lambda wildcards: anHuman if wildcards.species == SPECIES[0] else anXeno  

	output:
		counts = RESULTS + "counts/{sample}.{species}.featureCounts.txt"

	threads:
		config["threads"]
	shell:"""
		featureCounts  -L -a {input.annotation} -g 'gene_name' -p -t exon -T {threads} {input.bam} -o {output.counts}
	"""



# Currently not working - bettert to stick with featureCount for now
rule MapFlair:
	input:
		reads = lambda wildcards: config["samples"][wildcards.sample]
	output:
		out = RESULTS+"flair/{sample}.{species}/"
	params:
		an = lambda wildcards: anHuman if wildcards.species == SPECIES[0] else anXeno,
		ref = lambda wildcards: refHuman if wildcards.species == SPECIES[0] else refXeno
	conda:
		"flair"
	threads:
		config["threads"]
	shell:"""

		flair align --threads {threads} -g {params.ref} -r {input.reads} --output {output.out}
	"""

